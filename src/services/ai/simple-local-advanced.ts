// AI Local Avan√ßada - Sistema de IA 100% local otimizado
// Processamento avan√ßado de contexto e multilinguagem

export interface LocalAIResponse {
  content: string;
  suggestions?: string[];
  followUpQuestions?: string[];
  confidence: number;
  type: 'cv' | 'letter' | 'interview' | 'general' | 'tips';
  language: string;
}

export interface AdvancedParams {
  language: string;
  tone: 'professional' | 'casual' | 'formal' | 'friendly';
  industry?: string;
  experience?: 'entry' | 'mid' | 'senior' | 'executive';
  context?: 'cv' | 'letter' | 'interview' | 'general';
}

export class SimpleLocalAI {
  private patterns: Map<string, string[]> = new Map();
  private contextMemory: string[] = [];
  private industryKeywords: Map<string, string[]> = new Map();
  private languageTemplates: Map<string, any> = new Map();
  private semanticPatterns: Map<string, RegExp[]> = new Map();

  constructor() {
    this.initializeAdvancedPatterns();
    this.initializeIndustryKeywords();
    this.initializeLanguageTemplates();
    this.initializeSemanticAnalysis();
  }

  private initializeSemanticAnalysis() {
    // An√°lise sem√¢ntica avan√ßada com regex patterns
    this.semanticPatterns.set('cv_request', [
      /help.*cv|create.*resume|write.*curriculum|improve.*cv/i,
      /experience.*section|bullet.*points|achievements/i,
      /skills.*list|qualifications|education/i
    ]);

    this.semanticPatterns.set('letter_request', [
      /cover.*letter|application.*letter|write.*letter/i,
      /landlord.*letter|tenant.*notice|reference.*letter/i,
      /business.*letter|formal.*communication/i
    ]);

    this.semanticPatterns.set('interview_request', [
      /interview.*prep|interview.*questions|prepare.*interview/i,
      /behavioral.*questions|technical.*interview|phone.*interview/i,
      /interview.*tips|interview.*advice/i
    ]);
  }

  private initializeLanguageTemplates() {
    // Templates multilinguagem avan√ßados
    this.languageTemplates.set('en', {
      greeting: "ü§ñ Hello! I'm your advanced AI career assistant specializing in the UK job market.",
      cvHelp: "I'll help you create a standout CV that impresses UK employers with ATS-optimized content.",
      letterHelp: "I'll craft compelling letters that get results - from cover letters to landlord communications.",
      interviewHelp: "I'll prepare you for UK interviews with industry-specific insights and proven strategies.",
      followUp: "What specific area would you like me to focus on?",
      suggestions: [
        "üìÑ CV optimization with quantified achievements",
        "‚úâÔ∏è Cover letter writing with company research",
        "üéØ Interview preparation with STAR method",
        "üíº LinkedIn profile enhancement",
        "üè† Professional landlord communications",
        "üìà Salary negotiation strategies"
      ],
      industry: {
        technology: "Tech industry expertise: Agile methodologies, cloud platforms, programming languages",
        finance: "Finance sector knowledge: FCA regulations, risk management, financial analysis",
        healthcare: "Healthcare insights: NHS experience, patient care, clinical excellence",
        marketing: "Marketing excellence: Digital strategies, SEO/SEM, analytics, brand management"
      }
    });

    this.languageTemplates.set('pt', {
      greeting: "ü§ñ Ol√°! Sou seu assistente avan√ßado de carreira especializado no mercado de trabalho do Reino Unido.",
      cvHelp: "Vou te ajudar a criar um CV excepcional que impressiona empregadores do Reino Unido com conte√∫do otimizado para ATS.",
      letterHelp: "Vou criar cartas convincentes que geram resultados - desde cartas de apresenta√ß√£o at√© comunica√ß√µes com landlords.",
      interviewHelp: "Vou te preparar para entrevistas no Reino Unido com insights espec√≠ficos da ind√∫stria e estrat√©gias comprovadas.",
      followUp: "Em que √°rea espec√≠fica voc√™ gostaria que eu me concentrasse?",
      suggestions: [
        "üìÑ Otimiza√ß√£o de CV com conquistas quantificadas",
        "‚úâÔ∏è Reda√ß√£o de carta de apresenta√ß√£o com pesquisa da empresa",
        "üéØ Prepara√ß√£o para entrevista com m√©todo STAR",
        "üíº Melhoria do perfil do LinkedIn",
        "üè† Comunica√ß√µes profissionais com landlord",
        "üìà Estrat√©gias de negocia√ß√£o salarial"
      ],
      industry: {
        technology: "Expertise em tecnologia: Metodologias √°geis, plataformas cloud, linguagens de programa√ß√£o",
        finance: "Conhecimento financeiro: Regula√ß√µes FCA, gest√£o de risco, an√°lise financeira",
        healthcare: "Insights de sa√∫de: Experi√™ncia NHS, cuidado ao paciente, excel√™ncia cl√≠nica",
        marketing: "Excel√™ncia em marketing: Estrat√©gias digitais, SEO/SEM, analytics, gest√£o de marca"
      }
    });

    this.languageTemplates.set('es', {
      greeting: "ü§ñ ¬°Hola! Soy tu asistente avanzado de carrera especializado en el mercado laboral del Reino Unido.",
      cvHelp: "Te ayudar√© a crear un CV excepcional que impresione a los empleadores del Reino Unido con contenido optimizado para ATS.",
      letterHelp: "Crear√© cartas convincentes que generen resultados - desde cartas de presentaci√≥n hasta comunicaciones con landlords.",
      interviewHelp: "Te preparar√© para entrevistas en el Reino Unido con insights espec√≠ficos de la industria y estrategias probadas.",
      followUp: "¬øEn qu√© √°rea espec√≠fica te gustar√≠a que me enfoque?",
      suggestions: [
        "üìÑ Optimizaci√≥n de CV con logros cuantificados",
        "‚úâÔ∏è Redacci√≥n de carta de presentaci√≥n con investigaci√≥n de empresa",
        "üéØ Preparaci√≥n para entrevistas con m√©todo STAR",
        "üíº Mejora del perfil de LinkedIn",
        "üè† Comunicaciones profesionales con landlord",
        "üìà Estrategias de negociaci√≥n salarial"
      ],
      industry: {
        technology: "Experiencia en tecnolog√≠a: Metodolog√≠as √°giles, plataformas cloud, lenguajes de programaci√≥n",
        finance: "Conocimiento financiero: Regulaciones FCA, gesti√≥n de riesgo, an√°lisis financiero",
        healthcare: "Insights de salud: Experiencia NHS, cuidado al paciente, excelencia cl√≠nica",
        marketing: "Excelencia en marketing: Estrategias digitales, SEO/SEM, analytics, gesti√≥n de marca"
      }
    });
  }

  private initializeIndustryKeywords() {
    // Base de dados avan√ßada de palavras-chave por ind√∫stria
    this.industryKeywords.set('technology', [
      'javascript', 'python', 'react', 'node.js', 'aws', 'azure', 'docker', 'kubernetes',
      'agile', 'scrum', 'devops', 'ci/cd', 'microservices', 'api', 'machine learning',
      'artificial intelligence', 'blockchain', 'cloud computing', 'cybersecurity'
    ]);

    this.industryKeywords.set('finance', [
      'financial analysis', 'risk management', 'compliance', 'fca regulation', 'excel',
      'bloomberg', 'trading', 'investment banking', 'asset management', 'derivatives',
      'portfolio management', 'fintech', 'regulatory reporting', 'credit risk', 'market risk'
    ]);

    this.industryKeywords.set('healthcare', [
      'patient care', 'nhs', 'clinical excellence', 'medical research', 'healthcare innovation',
      'nursing', 'gmc registration', 'nmc registration', 'clinical governance', 'quality improvement',
      'patient safety', 'evidence-based practice', 'multi-disciplinary team', 'care pathways'
    ]);

    this.industryKeywords.set('marketing', [
      'digital marketing', 'seo', 'sem', 'social media marketing', 'content strategy',
      'google analytics', 'facebook ads', 'email marketing', 'brand management', 'crm',
      'marketing automation', 'conversion optimization', 'growth hacking', 'influencer marketing'
    ]);

    this.industryKeywords.set('legal', [
      'solicitor', 'barrister', 'legal research', 'contract law', 'litigation', 'commercial law',
      'sra regulation', 'bar council', 'property law', 'family law', 'criminal law',
      'dispute resolution', 'due diligence', 'regulatory compliance', 'legal writing'
    ]);

    this.industryKeywords.set('education', [
      'curriculum development', 'assessment', 'safeguarding', 'ofsted', 'teaching standards',
      'differentiation', 'inclusive education', 'behavior management', 'pastoral care',
      'professional development', 'educational technology', 'learning outcomes'
    ]);
  }

  private initializeAdvancedPatterns() {
    // Padr√µes avan√ßados para gera√ß√£o de conte√∫do profissional
    this.patterns.set('cv_achievements_senior', [
      'Led strategic transformation of {department} resulting in {percentage}% improvement in {metric} across {timeframe}',
      'Spearheaded cross-functional initiative involving {number} stakeholders, delivering {outcome} and {financial_impact}',
      'Established industry partnerships that generated ¬£{amount} in new revenue within {period}',
      'Implemented data-driven decision making processes that increased {kpi} by {percentage}% year-over-year'
    ]);

    this.patterns.set('cv_achievements_mid', [
      'Successfully managed {project_type} with budget of ¬£{amount}, delivering {outcome} on schedule',
      'Collaborated with {team_size} team members to achieve {goal}, resulting in {measurable_result}',
      'Developed and executed {strategy} that improved {process} efficiency by {percentage}%',
      'Mentored {number} junior colleagues, with {percentage}% achieving promotion within {timeframe}'
    ]);

    this.patterns.set('cv_achievements_entry', [
      'Contributed to team success by {specific_action}, supporting {team_goal}',
      'Demonstrated strong learning agility by mastering {skill/technology} within {timeframe}',
      'Participated in {project/initiative} that resulted in {positive_outcome}',
      'Showed initiative by {proactive_action} leading to {improvement/recognition}'
    ]);

    this.patterns.set('letter_executive', [
      'Your reputation for {company_strength} and commitment to {value} strongly aligns with my {personal_value} and {years}+ years of {expertise}',
      'Having {specific_achievement}, I am excited about the opportunity to drive {company_objective} as your next {position}',
      'My track record of {quantified_achievement} positions me well to {contribute_how} to {company_name}\'s {strategic_goal}'
    ]);

    this.patterns.set('interview_behavioral', [
      'STAR Example for "{question}": Situation - {context}, Task - {responsibility}, Action - {specific_steps}, Result - {quantified_outcome}',
      'Challenge faced: {problem}, Approach taken: {methodology}, Skills demonstrated: {competencies}, Impact achieved: {results}',
      'Leadership example: {scenario}, Decision process: {reasoning}, Team engagement: {approach}, Outcome: {success_metrics}'
    ]);
  }

  async generateAdvancedResponse(message: string, params: AdvancedParams): Promise<LocalAIResponse> {
    // An√°lise avan√ßada de contexto com IA sem√¢ntica
    const semanticContext = this.performSemanticAnalysis(message);
    const detectedIndustry = this.detectIndustryContext(message) || params.industry;
    const intentAnalysis = this.analyzeUserIntent(message);
    const complexityLevel = this.assessComplexityNeeds(message, params.experience);

    // Adicionar √† mem√≥ria contextual
    this.updateContextMemory(message, semanticContext);

    // Gerar resposta contextualizada
    const response = await this.generateContextualResponse(
      semanticContext,
      intentAnalysis,
      params,
      detectedIndustry,
      complexityLevel
    );

    // Calcular confian√ßa baseada em m√∫ltiplos fatores
    const confidence = this.calculateAdvancedConfidence(semanticContext, intentAnalysis, detectedIndustry);

    // Gerar sugest√µes e perguntas de follow-up
    const suggestions = this.generateSmartSuggestions(semanticContext, params.language, detectedIndustry);
    const followUpQuestions = this.generateContextualFollowUp(semanticContext, params.language);

    return {
      content: response,
      suggestions,
      followUpQuestions,
      confidence,
      type: semanticContext.primaryType,
      language: params.language
    };
  }

  private performSemanticAnalysis(message: string): any {
    const messageLower = message.toLowerCase();
    let primaryType: 'cv' | 'letter' | 'interview' | 'general' = 'general';
    let subContext: string[] = [];
    let urgency = 'normal';
    let complexity = 'medium';

    // An√°lise sem√¢ntica avan√ßada
    for (const [type, patterns] of this.semanticPatterns) {
      for (const pattern of patterns) {
        if (pattern.test(message)) {
          if (type.startsWith('cv_')) {
            primaryType = 'cv';
            subContext.push(type.replace('cv_', ''));
          } else if (type.startsWith('letter_')) {
            primaryType = 'letter';
            subContext.push(type.replace('letter_', ''));
          } else if (type.startsWith('interview_')) {
            primaryType = 'interview';
            subContext.push(type.replace('interview_', ''));
          }
        }
      }
    }

    // Detectar urg√™ncia
    if (messageLower.includes('urgent') || messageLower.includes('asap') || messageLower.includes('tomorrow')) {
      urgency = 'high';
    } else if (messageLower.includes('when possible') || messageLower.includes('no rush')) {
      urgency = 'low';
    }

    // Detectar complexidade
    if (messageLower.includes('executive') || messageLower.includes('senior') || messageLower.includes('director')) {
      complexity = 'high';
    } else if (messageLower.includes('entry') || messageLower.includes('graduate') || messageLower.includes('junior')) {
      complexity = 'low';
    }

    return {
      primaryType,
      subContext,
      urgency,
      complexity,
      keywords: this.extractKeywords(message),
      sentiment: this.analyzeSentiment(message)
    };
  }

  private detectIndustryContext(message: string): string | null {
    const messageLower = message.toLowerCase();
    
    for (const [industry, keywords] of this.industryKeywords) {
      const matchCount = keywords.filter(keyword => 
        messageLower.includes(keyword.toLowerCase())
      ).length;
      
      if (matchCount >= 2) { // Require at least 2 keyword matches
        return industry;
      }
    }
    
    return null;
  }

  private analyzeUserIntent(message: string): any {
    const messageLower = message.toLowerCase();
    
    const intents = {
      create: ['write', 'create', 'make', 'build', 'generate', 'draft'],
      improve: ['improve', 'enhance', 'optimize', 'better', 'upgrade', 'refine'],
      review: ['review', 'check', 'evaluate', 'assess', 'feedback', 'critique'],
      learn: ['explain', 'how', 'what', 'why', 'teach', 'understand', 'learn'],
      specific: ['specific', 'particular', 'exact', 'precise', 'detailed']
    };

    const detectedIntents: string[] = [];
    
    for (const [intent, keywords] of Object.entries(intents)) {
      if (keywords.some(keyword => messageLower.includes(keyword))) {
        detectedIntents.push(intent);
      }
    }

    return {
      primary: detectedIntents[0] || 'general',
      all: detectedIntents,
      confidence: detectedIntents.length > 0 ? 0.8 : 0.4
    };
  }

  private assessComplexityNeeds(message: string, experience?: string): string {
    if (experience) {
      return experience === 'entry' ? 'basic' : experience === 'senior' || experience === 'executive' ? 'advanced' : 'intermediate';
    }

    const messageLower = message.toLowerCase();
    
    if (messageLower.includes('executive') || messageLower.includes('c-level') || messageLower.includes('director')) {
      return 'advanced';
    } else if (messageLower.includes('graduate') || messageLower.includes('entry') || messageLower.includes('first job')) {
      return 'basic';
    }
    
    return 'intermediate';
  }

  private updateContextMemory(message: string, context: any): void {
    const contextEntry = {
      message,
      timestamp: Date.now(),
      type: context.primaryType,
      keywords: context.keywords
    };

    this.contextMemory.push(JSON.stringify(contextEntry));
    
    // Keep only last 15 entries for advanced context
    if (this.contextMemory.length > 15) {
      this.contextMemory.shift();
    }
  }

  private extractKeywords(message: string): string[] {
    // Extra√ß√£o inteligente de palavras-chave
    const words = message.toLowerCase().split(/\s+/);
    const stopWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'i', 'you', 'he', 'she', 'it', 'we', 'they']);
    
    return words
      .filter(word => word.length > 3 && !stopWords.has(word))
      .slice(0, 10); // Top 10 keywords
  }

  private analyzeSentiment(message: string): string {
    const positiveWords = ['excited', 'confident', 'passionate', 'motivated', 'enthusiastic', 'eager'];
    const negativeWords = ['struggle', 'difficult', 'challenge', 'problem', 'frustrated', 'stuck'];
    
    const messageLower = message.toLowerCase();
    const positiveCount = positiveWords.filter(word => messageLower.includes(word)).length;
    const negativeCount = negativeWords.filter(word => messageLower.includes(word)).length;
    
    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  private async generateContextualResponse(
    semanticContext: any,
    intentAnalysis: any,
    params: AdvancedParams,
    industry?: string,
    complexity?: string
  ): Promise<string> {
    const templates = this.languageTemplates.get(params.language) || this.languageTemplates.get('en')!;
    
    let response = templates.greeting + '\n\n';

    // Resposta baseada no tipo principal
    switch (semanticContext.primaryType) {
      case 'cv':
        response += this.generateAdvancedCVResponse(intentAnalysis, params, templates, industry, complexity);
        break;
      case 'letter':
        response += this.generateAdvancedLetterResponse(intentAnalysis, params, templates, industry);
        break;
      case 'interview':
        response += this.generateAdvancedInterviewResponse(intentAnalysis, params, templates);
        break;
      default:
        response += this.generateGeneralGuidance(params, templates);
    }

    // Adicionar insights espec√≠ficos da ind√∫stria
    if (industry && templates.industry[industry]) {
      response += '\n\nüéØ **' + industry.charAt(0).toUpperCase() + industry.slice(1) + ' Industry Insights:**\n';
      response += templates.industry[industry];
    }

    return response;
  }

  private generateAdvancedCVResponse(intentAnalysis: any, params: AdvancedParams, templates: any, industry?: string, complexity?: string): string {
    let response = templates.cvHelp + '\n\n';

    // Resposta baseada na complexidade e inten√ß√£o
    if (complexity === 'advanced') {
      response += 'üéØ **Executive-Level CV Strategy:**\n\n';
      response += this.generateExecutiveCVGuidance(params.language);
    } else if (complexity === 'basic') {
      response += 'üåü **Entry-Level CV Building:**\n\n';
      response += this.generateEntryLevelCVGuidance(params.language);
    } else {
      response += 'üìà **Professional CV Enhancement:**\n\n';
      response += this.generateMidLevelCVGuidance(params.language);
    }

    // Adicionar exemplos baseados na inten√ß√£o
    if (intentAnalysis.primary === 'create') {
      response += '\n\nüìù **CV Creation Framework:**\n';
      response += this.getCVCreationFramework(params.language);
    } else if (intentAnalysis.primary === 'improve') {
      response += '\n\n‚ú® **CV Optimization Checklist:**\n';
      response += this.getCVOptimizationChecklist(params.language);
    }

    return response;
  }

  private generateAdvancedLetterResponse(intentAnalysis: any, params: AdvancedParams, templates: any, industry?: string): string {
    let response = templates.letterHelp + '\n\n';

    response += 'üìã **Letter Writing Excellence:**\n\n';
    
    if (intentAnalysis.primary === 'create') {
      response += this.getLetterCreationGuide(params.language);
    } else {
      response += this.getLetterImprovementTips(params.language);
    }

    return response;
  }

  private generateAdvancedInterviewResponse(intentAnalysis: any, params: AdvancedParams, templates: any): string {
    let response = templates.interviewHelp + '\n\n';

    response += 'üéØ **Advanced Interview Mastery:**\n\n';
    response += this.getInterviewMasteryGuide(params.language);

    return response;
  }

  // Helper methods for content generation
  private generateExecutiveCVGuidance(language: string): string {
    if (language === 'pt') {
      return '‚Ä¢ Foque em transforma√ß√£o organizacional e resultados estrat√©gicos\n‚Ä¢ Inclua m√©tricas de P&L e crescimento de receita\n‚Ä¢ Destaque lideran√ßa de equipes multifuncionais\n‚Ä¢ Mencione experi√™ncia em fus√µes e aquisi√ß√µes se relevante';
    } else if (language === 'es') {
      return '‚Ä¢ Enf√≥cate en transformaci√≥n organizacional y resultados estrat√©gicos\n‚Ä¢ Incluye m√©tricas de P&L y crecimiento de ingresos\n‚Ä¢ Destaca liderazgo de equipos multifuncionales\n‚Ä¢ Menciona experiencia en fusiones y adquisiciones si es relevante';
    }
    return '‚Ä¢ Focus on organizational transformation and strategic outcomes\n‚Ä¢ Include P&L metrics and revenue growth\n‚Ä¢ Highlight cross-functional team leadership\n‚Ä¢ Mention M&A experience if relevant';
  }

  private generateEntryLevelCVGuidance(language: string): string {
    if (language === 'pt') {
      return '‚Ä¢ Destaque projetos acad√™micos e est√°gios\n‚Ä¢ Inclua habilidades transfer√≠veis de trabalhos de meio per√≠odo\n‚Ä¢ Mostre iniciativa atrav√©s de trabalho volunt√°rio\n‚Ä¢ Foque em potencial e vontade de aprender';
    } else if (language === 'es') {
      return '‚Ä¢ Destaca proyectos acad√©micos y pr√°cticas\n‚Ä¢ Incluye habilidades transferibles de trabajos de medio tiempo\n‚Ä¢ Muestra iniciativa a trav√©s de trabajo voluntario\n‚Ä¢ Enf√≥cate en potencial y ganas de aprender';
    }
    return '‚Ä¢ Highlight academic projects and internships\n‚Ä¢ Include transferable skills from part-time work\n‚Ä¢ Show initiative through volunteer work\n‚Ä¢ Focus on potential and eagerness to learn';
  }

  private generateMidLevelCVGuidance(language: string): string {
    if (language === 'pt') {
      return '‚Ä¢ Quantifique conquistas com n√∫meros espec√≠ficos\n‚Ä¢ Mostre progress√£o de carreira e promo√ß√µes\n‚Ä¢ Inclua projetos que liderou ou co-liderou\n‚Ä¢ Destaque mentoria e desenvolvimento de equipe';
    } else if (language === 'es') {
      return '‚Ä¢ Cuantifica logros con n√∫meros espec√≠ficos\n‚Ä¢ Muestra progresi√≥n de carrera y promociones\n‚Ä¢ Incluye proyectos que lideraste o co-lideraste\n‚Ä¢ Destaca mentor√≠a y desarrollo de equipo';
    }
    return '‚Ä¢ Quantify achievements with specific numbers\n‚Ä¢ Show career progression and promotions\n‚Ä¢ Include projects you led or co-led\n‚Ä¢ Highlight mentoring and team development';
  }

  private getCVCreationFramework(language: string): string {
    if (language === 'pt') {
      return '1. **Declara√ß√£o Pessoal** (2-3 linhas)\n2. **Experi√™ncia Profissional** (ordem cronol√≥gica reversa)\n3. **Educa√ß√£o & Qualifica√ß√µes**\n4. **Habilidades Chave**\n5. **Realiza√ß√µes & Certifica√ß√µes**';
    } else if (language === 'es') {
      return '1. **Declaraci√≥n Personal** (2-3 l√≠neas)\n2. **Experiencia Profesional** (orden cronol√≥gico inverso)\n3. **Educaci√≥n y Calificaciones**\n4. **Habilidades Clave**\n5. **Logros y Certificaciones**';
    }
    return '1. **Personal Statement** (2-3 lines)\n2. **Professional Experience** (reverse chronological)\n3. **Education & Qualifications**\n4. **Key Skills**\n5. **Achievements & Certifications**';
  }

  private getCVOptimizationChecklist(language: string): string {
    if (language === 'pt') {
      return '‚úÖ Palavras-chave do an√∫ncio inclu√≠das\n‚úÖ Conquistas quantificadas com n√∫meros\n‚úÖ Verbos de a√ß√£o fortes utilizados\n‚úÖ Formata√ß√£o limpa e consistente\n‚úÖ Revis√£o ortogr√°fica completa';
    } else if (language === 'es') {
      return '‚úÖ Palabras clave del anuncio incluidas\n‚úÖ Logros cuantificados con n√∫meros\n‚úÖ Verbos de acci√≥n fuertes utilizados\n‚úÖ Formato limpio y consistente\n‚úÖ Revisi√≥n ortogr√°fica completa';
    }
    return '‚úÖ Job posting keywords included\n‚úÖ Achievements quantified with numbers\n‚úÖ Strong action verbs used\n‚úÖ Clean, consistent formatting\n‚úÖ Thorough proofreading completed';
  }

  private getLetterCreationGuide(language: string): string {
    if (language === 'pt') {
      return '**Estrutura da Carta:**\n‚Ä¢ **Abertura:** Posi√ß√£o espec√≠fica + interesse genu√≠no\n‚Ä¢ **Corpo:** Conquistas relevantes + pesquisa da empresa\n‚Ä¢ **Fechamento:** Reafirma√ß√£o + pr√≥ximos passos';
    } else if (language === 'es') {
      return '**Estructura de la Carta:**\n‚Ä¢ **Apertura:** Posici√≥n espec√≠fica + inter√©s genuino\n‚Ä¢ **Cuerpo:** Logros relevantes + investigaci√≥n de empresa\n‚Ä¢ **Cierre:** Reafirmaci√≥n + pr√≥ximos pasos';
    }
    return '**Letter Structure:**\n‚Ä¢ **Opening:** Specific position + genuine interest\n‚Ä¢ **Body:** Relevant achievements + company research\n‚Ä¢ **Closing:** Reaffirmation + next steps';
  }

  private getLetterImprovementTips(language: string): string {
    if (language === 'pt') {
      return '‚Ä¢ Personalize para cada aplica√ß√£o\n‚Ä¢ Pesquise o gerente de contrata√ß√£o\n‚Ä¢ Use exemplos espec√≠ficos de conquistas\n‚Ä¢ Mostre conhecimento da empresa\n‚Ä¢ Mantenha tom profissional mas aut√™ntico';
    } else if (language === 'es') {
      return '‚Ä¢ Personaliza para cada aplicaci√≥n\n‚Ä¢ Investiga al gerente de contrataci√≥n\n‚Ä¢ Usa ejemplos espec√≠ficos de logros\n‚Ä¢ Muestra conocimiento de la empresa\n‚Ä¢ Mant√©n tono profesional pero aut√©ntico';
    }
    return '‚Ä¢ Customize for each application\n‚Ä¢ Research the hiring manager\n‚Ä¢ Use specific achievement examples\n‚Ä¢ Show company knowledge\n‚Ä¢ Keep professional yet authentic tone';
  }

  private getInterviewMasteryGuide(language: string): string {
    if (language === 'pt') {
      return 'üéØ **Prepara√ß√£o Estrat√©gica:**\n‚Ä¢ M√©todo STAR para perguntas comportamentais\n‚Ä¢ Pesquisa profunda da empresa e setor\n‚Ä¢ Prepara√ß√£o de perguntas inteligentes\n‚Ä¢ Pr√°tica de comunica√ß√£o n√£o-verbal\n‚Ä¢ Estrat√©gias de negocia√ß√£o salarial';
    } else if (language === 'es') {
      return 'üéØ **Preparaci√≥n Estrat√©gica:**\n‚Ä¢ M√©todo STAR para preguntas conductuales\n‚Ä¢ Investigaci√≥n profunda de empresa y sector\n‚Ä¢ Preparaci√≥n de preguntas inteligentes\n‚Ä¢ Pr√°ctica de comunicaci√≥n no verbal\n‚Ä¢ Estrategias de negociaci√≥n salarial';
    }
    return 'üéØ **Strategic Preparation:**\n‚Ä¢ STAR method for behavioral questions\n‚Ä¢ Deep company and industry research\n‚Ä¢ Intelligent questions preparation\n‚Ä¢ Non-verbal communication practice\n‚Ä¢ Salary negotiation strategies';
  }

  private generateGeneralGuidance(params: AdvancedParams, templates: any): string {
    return templates.followUp + '\n\n' + 
           '**Available Services:**\n' + 
           templates.suggestions.map((s: string) => `‚Ä¢ ${s}`).join('\n');
  }

  private calculateAdvancedConfidence(semanticContext: any, intentAnalysis: any, industry?: string): number {
    let confidence = 0.5; // Base confidence

    // Boost confidence based on semantic analysis
    if (semanticContext.primaryType !== 'general') confidence += 0.2;
    if (semanticContext.subContext.length > 0) confidence += 0.1;
    
    // Boost confidence based on intent clarity
    if (intentAnalysis.confidence > 0.7) confidence += 0.15;
    
    // Boost confidence if industry detected
    if (industry) confidence += 0.1;

    // Cap at 0.95 to maintain realism
    return Math.min(confidence, 0.95);
  }

  private generateSmartSuggestions(semanticContext: any, language: string, industry?: string): string[] {
    const templates = this.languageTemplates.get(language) || this.languageTemplates.get('en')!;
    
    let suggestions = [...templates.suggestions];
    
    // Add industry-specific suggestions
    if (industry) {
      if (language === 'pt') {
        suggestions.push(`üè≠ Otimiza√ß√£o espec√≠fica para ${industry}`);
      } else if (language === 'es') {
        suggestions.push(`üè≠ Optimizaci√≥n espec√≠fica para ${industry}`);
      } else {
        suggestions.push(`üè≠ ${industry}-specific optimization`);
      }
    }

    return suggestions.slice(0, 6); // Return top 6 suggestions
  }

  private generateContextualFollowUp(semanticContext: any, language: string): string[] {
    const questions: Record<string, string[]> = {
      en: [
        "Would you like me to focus on any specific section?",
        "Are you targeting a particular company or role?",
        "Do you need help with industry-specific requirements?",
        "Would you like examples tailored to your experience level?"
      ],
      pt: [
        "Gostaria que eu focasse em alguma se√ß√£o espec√≠fica?",
        "Est√° mirando alguma empresa ou cargo espec√≠fico?",
        "Precisa de ajuda com requisitos espec√≠ficos da ind√∫stria?",
        "Gostaria de exemplos adequados ao seu n√≠vel de experi√™ncia?"
      ],
      es: [
        "¬øTe gustar√≠a que me enfoque en alguna secci√≥n espec√≠fica?",
        "¬øEst√°s apuntando a alguna empresa o puesto espec√≠fico?",
        "¬øNecesitas ayuda con requisitos espec√≠ficos de la industria?",
        "¬øTe gustar√≠an ejemplos adaptados a tu nivel de experiencia?"
      ]
    };

    return questions[language] || questions.en;
  }

  // M√©todo principal para compatibilidade com API existente
  async generateResponse(message: string, language: string = 'en'): Promise<string> {
    const params: AdvancedParams = {
      language,
      tone: 'professional',
      context: 'general'
    };

    const response = await this.generateAdvancedResponse(message, params);
    return response.content;
  }
}