generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Users table for authentication and user management
model User {
  id               String    @id @default(uuid())
  email            String    @unique
  username         String?   @unique
  name             String?
  firstName        String?
  lastName         String?
  password         String?   // Hashed password for email/password auth
  image            String?
  emailVerified    DateTime?
  phone            String?
  plan             String    @default("free") // free, pro, enterprise
  planExpiresAt    DateTime?
  tokensUsed       Int       @default(0)
  messagesUsed     Int       @default(0)
  downloadsUsed    Int       @default(0) // Track downloads for free plan limits
  lastResetAt      DateTime  @default(now())
  lastLoginAt      DateTime?
  isActive         Boolean   @default(true)
  isEmailVerified  Boolean   @default(false)
  twoFactorEnabled Boolean   @default(false)
  metadata         Json?     // For additional user data
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  cvDrafts             CvDraft[]
  letterDrafts         LetterDraft[]
  sessions             Session[]
  accounts             Account[]
  passwordResetTokens  PasswordResetToken[]

  @@index([email])
  @@index([username])
  @@index([plan, planExpiresAt])
  @@index([lastLoginAt])
  @@index([createdAt])
}

// NextAuth Account model
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

// NextAuth Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

// Password Reset Token model for secure password resets
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model CvDraft {
  id        String   @id @default(uuid())
  userId    String
  title     String?  @default("Untitled CV")
  payload   Json
  isPublic  Boolean  @default(false)
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt])
  @@index([isPublic, createdAt])
  @@index([createdAt])
}

model LetterDraft {
  id        String   @id @default(uuid())
  userId    String
  title     String?  @default("Untitled Letter")
  jobTitle  String?
  company   String?
  payload   Json
  isPublic  Boolean  @default(false)
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt])
  @@index([isPublic, createdAt])
  @@index([jobTitle, company])
  @@index([createdAt])
}

// Rate limiting and security tracking
model RateLimit {
  id        String   @id @default(uuid())
  key       String   @unique // ip:endpoint or user:endpoint
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key, resetAt])
  @@index([resetAt]) // For cleanup
}

// Security incident tracking
model SecurityEvent {
  id        String   @id @default(uuid())
  type      String   // ATTACK_DETECTED, RATE_LIMIT_EXCEEDED, etc.
  ip        String
  userAgent String?
  path      String
  metadata  Json?    // Additional event data
  severity  String   @default("medium") // low, medium, high, critical
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([type, createdAt])
  @@index([ip, createdAt])
  @@index([severity, resolved])
  @@index([createdAt])
}

// System metrics and health monitoring
model SystemMetric {
  id        String   @id @default(uuid())
  metric    String   // cpu_usage, memory_usage, api_response_time, etc.
  value     Float
  unit      String?  // %, ms, bytes, etc.
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([metric, createdAt])
  @@index([createdAt])
}

// AI usage tracking for cost management
model AiUsage {
  id           String   @id @default(uuid())
  userId       String?
  sessionId    String?  // For anonymous users
  model        String   // qwen3:8b, gpt-4, etc.
  tokensInput  Int
  tokensOutput Int
  cost         Float?   // Cost in currency units
  endpoint     String   // chat, cv-analysis, etc.
  success      Boolean  @default(true)
  errorMessage String?
  responseTime Int?     // Response time in milliseconds
  createdAt    DateTime @default(now())

  @@index([userId, createdAt])
  @@index([sessionId, createdAt])
  @@index([model, createdAt])
  @@index([createdAt])
}

// Payment tracking
model Payment {
  id              String   @id @default(uuid())
  userId          String
  stripePaymentId String?  @unique
  amount          Float
  currency        String   @default("GBP")
  plan            String   // pro, enterprise
  status          String   // pending, completed, failed, refunded
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([createdAt])
}
